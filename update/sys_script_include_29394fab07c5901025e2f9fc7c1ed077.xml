<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_264406_backup.ConfluenceSetStructure</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ConfluenceSetStructure</name>
        <script><![CDATA[var ConfluenceSetStructure = Class.create();
ConfluenceSetStructure.prototype = {
    initialize: function() {

    },


    setDescription: function(inputs) {
        var test = inputs.description;
        test = test.substring(test.indexOf("<p>") + 3, test.indexOf("</p>"));

        return test;
    },

    setErrorMessage: function(inputs) {
        var rest = inputs.description;
        rest = rest.substring(rest.indexOf("<p><b>Error Messages:</b>"));
        rest = rest.substring(0, rest.indexOf("</p>"));
        rest = rest.substring(rest.indexOf("<li>"));
        rest = rest.replace(/<li>/g, "");
        rest = rest.substring(0, rest.lastIndexOf("</ul>"));
        var err_arr = rest.split("</li>");
        for (var str in err_arr) {
            err_arr[str] = (err_arr[str]).trim();
            err_arr[str] = "<tr><td><p><span style=\"color: rgb(0,0,0);\">" + err_arr[str] + "</span></p></td></tr>";
        }
        return err_arr.join(' ');
    },


    createInputsDescriptionTable: function(inputs, caller, IorO) {
        var find = (IorO == "I") ? "<p><b>Inputs:</b>" : "<p><b>Outputs:</b>";
        var desc = inputs.description;
        desc = desc.substring(desc.indexOf(find));
        desc = desc.replace(find, "");
        desc = desc.substring(0, desc.indexOf("</p>"));
        desc = desc.substring(0, desc.lastIndexOf("</ul>"));
        var arr = desc.split("<li><b>");
        var json = {};
        json.data = [];
        var slpitarr = [];

        for (var item in arr) {
            if (arr[item].indexOf("</b>") != -1) {
                splitarr = arr[item].split("</b>");
                json.data.push({
                    key: splitarr[0],
                    value: splitarr[1].substring(0, splitarr[1].lastIndexOf("</li>")).replace("-", "")
                });
            }
        }


        if (caller == "createtestcase") {
            return json;
        }
        var inputtable = "";
        if (IorO == "I") {
            for (item in json.data) {
                inputtable = inputtable + '<tr class=\"tablesorter-headerRow\"><td class=\"tablesorter-header sortableHeader tablesorter-headerUnSorted\" colspan=\"1\">' + json.data[item].key + '<br /></td><td class=\"tablesorter-header sortableHeader tablesorter-headerUnSorted\" colspan=\"1\">' + json.data[item].value + '<br /></td><td class=\"tablesorter-header sortableHeader tablesorter-headerUnSorted\" colspan=\"1\"><br /></td><td class=\"tablesorter-header sortableHeader tablesorter-headerUnSorted\" colspan=\"1\"><br /></td></tr>';
            }
        } else {
            for (item in json.data) {
                inputtable = inputtable + '<tr class=\"tablesorter-headerRow\"><td class=\"tablesorter-header sortableHeader tablesorter-headerUnSorted\" colspan=\"1\">' + json.data[item].key + '<br /></td><td class=\"tablesorter-header sortableHeader tablesorter-headerUnSorted\" colspan=\"1\">' + json.data[item].value + '<br /></td></tr>';
            }
        }

        return inputtable;

    },
    createInputOuputHTML: function(test_array, type) {
        var test_html_concat = "";
        for (var item in test_array) {

            if (test_array[item].key == "Status" && (type == "generictable_tci1" || type == "generictable_tci2" || type == "generictable_tci3")) {
                test_html_concat = test_html_concat + "<p><strong>" + test_array[item].key + " : </strong> Error <br /> </p> ";
            } else if (test_array[item].key == "Error Message" && (type == "generictable_tci1" || type == "generictable_tci2" || type == "generictable_tci3")) {
                if (type == "generictable_tci1") {
                    test_html_concat = test_html_concat + "<p><strong>" + test_array[item].key + " : </strong> Invalid username, password, or token, or expired token.<br /> </p> ";
                } else if (type == "generictable_tci2") {
                    test_html_concat = test_html_concat + "<p><strong>" + test_array[item].key + " : </strong>User doesn't have sufficient permission to perform this action.<br /></p> ";
                } else if (type == "generictable_tci3") {
                    test_html_concat = test_html_concat + "<p><strong>" + test_array[item].key + " : </strong>Unexpected error occurred. Check the response received from the API for more details.<br /></p> ";
                }
            } else {
                test_html_concat = test_html_concat + "<p><strong>" + test_array[item].key + " : </strong><br /> </p> ";
            }
        }
        return test_html_concat;
    },
    createtestcase: function(inputs) {
        var test_title = "Description";
       
        var inputjson = new ConfluenceSetStructure().createInputsDescriptionTable(inputs, "createtestcase", "I");
       var outputjson = new ConfluenceSetStructure().createInputsDescriptionTable(inputs, "createtestcase", "O");
        var test_input =  inputjson.data;
		 var test_output =  outputjson.data;
       /* var test_input = [{
            "key": "Input1"
        }, {
            "key": "Input2"
        }, {
            "key": "Input3"
        }, {
            "key": "Input4"
        }];
        var test_output = [{
            "key": "Output1"
        }, {
            "key": "Output2"
        }, {
            "key": "Status"
        }, {
            "key": "Error Message"
        }];*/
        var casetblheader = "<colgroup><col style=\"width: 151.0px;\" /><col style=\"width: 211.0px;\" /><col style=\"width: 211.0px;\" /><col style=\"width: 115.0px;\" /><col style=\"width: 71.0px;\" /></colgroup><tbody><tr><th><p>Test Case - Description</p></th><th><p>Inputs</p></th><th><p>Outputs</p></th><th><p>Expected Result?</p></th><th><p>Notes</p></th></tr>";

        var casetable = "<table data-layout=\"default\">" + casetblheader + "<tr><td><p>" + test_title + "</p></td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_input, "casetable") + "</td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_output, "casetable") + "</td><td><p>Snow instance check:</p></td><td><p><br /></p></td></tr></tbody></table>";


        var generictable = "<p>TCI1</p><table data-layout=\"default\">" + casetblheader + "<tr><td><p>The generated session token is not valid.</p></td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_input, "casetable") + "</td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_output, "generictable_tci1") + "</td><td><p>Snow instance check:</p></td><td><p><br /></p></td></tr></tbody></table><p>TCI2</p><table data-layout=\"default\">" + casetblheader + "<tr><td><p>Credentials not associated with appropriate permission.</p></td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_input, "casetable") + " </td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_output, "generictable_tci2") + "</td><td><p>Snow instance check:</p></td><td><p><br /></p></td></tr></tbody></table><p>TCI1</p><table data-layout=\"default\">" + casetblheader + "<tr><td><p>Unexpected Error.</p></td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_input, "casetable") + "</td><td>" + new ConfluenceSetStructure().createInputOuputHTML(test_output, "generictable_tci3") + "</td><td><p>Snow instance check:</p></td><td><p><br /></p></td></tr></tbody></table>";
        var concattable = "";
        for (var item = 0; item < inputs.no_of_test_cases; item++) {
            concattable = concattable + "<p>TC" + (parseInt(item) + 1) + "</p>";
            concattable = concattable.concat(casetable);
        }

        concattable = concattable.concat(generictable);
        return concattable;

    },
    type: 'ConfluenceSetStructure'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-06-03 11:51:32</sys_created_on>
        <sys_id>29394fab07c5901025e2f9fc7c1ed077</sys_id>
        <sys_mod_count>67</sys_mod_count>
        <sys_name>ConfluenceSetStructure</sys_name>
        <sys_package display_value="Backup" source="x_264406_backup">0ebc18470781101025e2f9fc7c1ed0be</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Backup">0ebc18470781101025e2f9fc7c1ed0be</sys_scope>
        <sys_update_name>sys_script_include_29394fab07c5901025e2f9fc7c1ed077</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-06-23 10:05:21</sys_updated_on>
    </sys_script_include>
</record_update>
